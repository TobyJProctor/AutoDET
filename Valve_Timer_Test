/*This code runs both pumps, consecutively, for 5 s each.
There is no switch required for operation.
At the end of loop the pumps should be turned off permanently.*/ 

#include <Wire.h>
#include <Adafruit_MotorShield.h>
#include "utility/Adafruit_MS_PWMServoDriver.h"
 
Adafruit_MotorShield AFMS = Adafruit_MotorShield();//is this line necessary?
Adafruit_MotorShield AFMS0(0x60);//binary0000, no jumpers
Adafruit_MotorShield AFMS1(0x61);//binary0001, bridge A0
Adafruit_MotorShield AFMS2(0x62);//binary0010, bridge A1
Adafruit_MotorShield AFMS3(0x63);//binary0011, bridge A0 & A1

Adafruit_DCMotor *wmMotor30 = AFMS0.getMotor(4);
Adafruit_DCMotor *wmMotor200 = AFMS0.getMotor(1);
Adafruit_DCMotor *sMotorFilter = AFMS1.getMotor(1);
Adafruit_DCMotor *sMotorH2O = AFMS1.getMotor(2);
Adafruit_DCMotor *sMotorDNase = AFMS2.getMotor(1);
Adafruit_DCMotor *sMotorSDC = AFMS2.getMotor(2);
Adafruit_DCMotor *sMotor3W = AFMS3.getMotor(1);
Adafruit_DCMotor *sMotorWaste = AFMS3.getMotor(2);

boolean wmMotor30Enabled = false;//Motor running or not
boolean wmMotor200Enabled = false;
boolean sMotorFilterEnabled = false;
boolean sMotorH2OEnabled = false;
boolean sMotorDNaseEnabled = false;
boolean sMotorSDCEnabled = false;
boolean sMotor3WEnabled = false;
boolean sMotorWasteEnabled = false;

unsigned long startMillis = 0;
unsigned long currentMillis = 0;
unsigned long startDelay = 5000;
unsigned long elapsedPause = 0;
unsigned long elapsedMillis = 0;
unsigned long wmMotor200PrimeMillis = 5000;
unsigned long wmMotor30RunH2O72hMillis = 5000;
unsigned long wmMotor200CleanMillis = 5000;
unsigned long wmMotor30RunH2O72hMillis = 5000;
unsigned long wmMotor30RunH2O12hMillis = 5000;
unsigned long wmMotor30RunH2O1hMillis = 5000;
unsigned long wmMotor30DNase3hMillis = 5000;
unsigned long wmMotor30SDC4hMillis = 5000;

void setup() {
  // put your setup code here, to run once:
AFMS.begin();  // create with the default frequency 1.6KHz
AFMS0.begin(); // call shield 0
AFMS1.begin();
AFMS2.begin();
AFMS3.begin();

wmMotor30Enabled = false; // wmMotor Off
wmMotor200Enabled = false; // wmMotor Off
sMotorFilterEnabled = false; // NC valve
sMotorH2OEnabled = false;// NO valve
sMotorDNaseEnabled = false; // NC valve
sMotorSDCEnabled = false; // NC valve
sMotor3WEnabled = false; // wmMotor200 port closed
sMotorWasteEnabled = false; // NO valve
}

void loop() {
  // put your main code here, to run repeatedly:
    
    delay(5000);
    startMillis = millis();
    delay(10);
    currentMillis = millis();
    while((currentMillis - (startMillis + elapsedPause)) < wmMotor200PrimeMillis){//wmMotor200
      wmMotor200Enabled = true;// wmMotor200 on
      wmMotor200->run(FORWARD);//CLOCKWISE
      wmMotor200->setSpeed(100);
      wmMotor30Enabled = false;
      sMotorFilterEnabled = false; // NC valve
			sMotorH2OEnabled = false;// NO valve
			sMotorDNaseEnabled = false; // NC valve
			sMotorSDCEnabled = false; // NC valve
			sMotor3WEnabled = false; // wmMotor200 port closed
			sMotorWasteEnabled = false; // NO valve
      currentMillis = millis(); 
  }
    startMillis = millis();
    delay(10);
    currentMillis = millis();
    while((currentMillis - (startMillis + elapsedPause)) < wmMotor30RunH2O72hMillis){//wmMotor30
      wmMotor200Enabled = false;// wmMotor200 on
      wmMotor200->run(RELEASE);//CLOCKWISE
      wmMotor200->setSpeed(0);
      wmMotor30Enabled = true;
      wmMotor30->run(FORWARD);
      wmMotor30->setSpeed(100);
			sMotorFilterEnabled = false; // NC valve
			sMotorH2OEnabled = false;// NO valve
			sMotorDNaseEnabled = false; // NC valve
			sMotorSDCEnabled = false; // NC valve
			sMotor3WEnabled = false; // wmMotor200 port closed
			sMotorWasteEnabled = false; // NO valve
      currentMillis = millis(); 
  }
	  startMillis = millis();
    delay(10);
    currentMillis = millis();
    while((currentMillis - (startMillis + elapsedPause)) < wmMotor30RunH2O72hMillis){//sMotorFilter
      wmMotor200Enabled = false;// wmMotor200 on
      wmMotor30Enabled = false;
      wmMotor30->run(RELEASE);
      wmMotor30->setSpeed(0);
			sMotorFilterEnabled = true; // NC valve
			sMotorFilter->run(FORWARD);
			sMotorFilter->setSpeed(100);
			sMotorH2OEnabled = false;// NO valve
			sMotorDNaseEnabled = false; // NC valve
			sMotorSDCEnabled = false; // NC valve
			sMotor3WEnabled = false; // wmMotor200 port closed
			sMotorWasteEnabled = false; // NO valve
      currentMillis = millis();
	}
		startMillis = millis();
    delay(10);
    currentMillis = millis();
    while((currentMillis - (startMillis + elapsedPause)) < wmMotor30RunH2O72hMillis){//sMotorH2O
      wmMotor200Enabled = false;// wmMotor200 on
      wmMotor30Enabled = false;
			sMotorFilterEnabled = false; // NC valve
			sMotorFilter->run(RELEASE);
			sMotorFilter->setSpeed(0);
			sMotorH2OEnabled = true;// NO valve
			sMotorH2O->run(FORWARD);
			sMotorH2O->setSpeed(100);
			sMotorDNaseEnabled = false; // NC valve
			sMotorSDCEnabled = false; // NC valve
			sMotor3WEnabled = false; // wmMotor200 port closed
			sMotorWasteEnabled = false; // NO valve
      currentMillis = millis();
	}
		startMillis = millis();
    delay(10);
    currentMillis = millis();
    while((currentMillis - (startMillis + elapsedPause)) < wmMotor30RunH2O72hMillis){//sMotorDNase
      wmMotor200Enabled = false;// wmMotor200 on
      wmMotor30Enabled = false;
			sMotorFilterEnabled = false; // NC valve
			sMotorH2OEnabled = false;// NO valve
			sMotorH2O->run(RELEASE);
			sMotorH2O->setSpeed(0);
			sMotorDNaseEnabled = true; // NC valve
			sMotorDNase->run(FORWARD);
			sMotorDNase->setSpeed(100);
			sMotorSDCEnabled = false; // NC valve
			sMotor3WEnabled = false; // wmMotor200 port closed
			sMotorWasteEnabled = false; // NO valve
      currentMillis = millis();
	}
		startMillis = millis();
    delay(10);
    currentMillis = millis();
    while((currentMillis - (startMillis + elapsedPause)) < wmMotor30RunH2O72hMillis){//sMotorSDC
      wmMotor200Enabled = false;// wmMotor200 on
      wmMotor30Enabled = false;
			sMotorFilterEnabled = false; // NC valve
			sMotorH2OEnabled = false;// NO valve
			sMotorDNaseEnabled = false; // NC valve
			sMotorDNase->run(RELEASE);
			sMotorDNase->setSpeed(0);
			sMotorSDCEnabled = true; // NC valve
			sMotorSDC->run(FORWARD);
			sMotorSDC->setSpeed(100);
			sMotor3WEnabled = false; // wmMotor200 port closed
			sMotorWasteEnabled = false; // NO valve
      currentMillis = millis();
	}
		startMillis = millis();
    delay(10);
    currentMillis = millis();
    while((currentMillis - (startMillis + elapsedPause)) < wmMotor30RunH2O72hMillis){//sMotor3W
      wmMotor200Enabled = false;// wmMotor200 on
      wmMotor30Enabled = false;
			sMotorFilterEnabled = false; // NC valve
			sMotorH2OEnabled = false;// NO valve
			sMotorDNaseEnabled = false; // NC valve
			sMotorSDCEnabled = false; // NC valve
			sMotorSDC->run(RELEASE);
			sMotorSDC->setSpeed(0);
			sMotor3WEnabled = true; // wmMotor200 port closed
			sMotor3W->run(FORWARD);
			sMotor3W->setSpeed(100);
			sMotorWasteEnabled = false; // NO valve
      currentMillis = millis();
	}
		startMillis = millis();
    delay(10);
    currentMillis = millis();
    while((currentMillis - (startMillis + elapsedPause)) < wmMotor30RunH2O72hMillis){//sMotorWaste
      wmMotor200Enabled = false;// wmMotor200 on
      wmMotor30Enabled = false;
			sMotorFilterEnabled = false; // NC valve
			sMotorH2OEnabled = false;// NO valve
			sMotorDNaseEnabled = false; // NC valve
			sMotorSDCEnabled = false; // NC valve
			sMotor3WEnabled = false; // wmMotor200 port open
			sMotor3W->run(RELEASE);
			sMotor3W->setSpeed(0);
			sMotorWasteEnabled = true; // NO valve
			sMotorWaste->run(FORWARD);
			sMotorWaste->setSpeed(100);
      currentMillis = millis();
	}
    currentMillis = millis();
    while(currentMillis > 0){
      wmMotor200Enabled = false;// wmMotor200 on
      wmMotor30Enabled = false;
			sMotorFilterEnabled = false; // NC valve
			sMotorH2OEnabled = false;// NO valve
			sMotorDNaseEnabled = false; // NC valve
			sMotorSDCEnabled = false; // NC valve
			sMotor3WEnabled = false; // wmMotor200 port open
			sMotor3W->run(RELEASE);
			sMotor3W->setSpeed(0);
			sMotorWasteEnabled = false; // NO valve
			sMotorWaste->run(RELEASE);
			sMotorWaste->setSpeed(0);
      currentMillis = millis();
	}
}
